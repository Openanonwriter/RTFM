Write-Host "Checking if AppInstaller/Winget is Installed"

# Use a simpler and more reliable check for App Installer
if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
    Write-Host "AppInstaller/Winget is not installed, starting installation now"
Write-Information "Downloading WinGet and its dependencies..."
Write-Host "Installing... Please wait"
Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
Invoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.8.6/Microsoft.UI.Xaml.2.8.x64.appx -OutFile Microsoft.UI.Xaml.2.8.x64.appx
Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx
Add-AppxPackage Microsoft.UI.Xaml.2.8.x64.appx
Add-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle

    # Brief pause to ensure winget is ready 
    Start-Sleep -Seconds 2  
} else {
    Write-Host "AppInstaller/Winget is Installed"
}

# Updated list of programs (you can customize this)
$defaultinstalltable = @(
    "Malwarebytes.Malwarebytes",
    "Adobe.Acrobat.Reader.64-bit",
    "Google.Chrome",
    "AnyDeskSoftwareGmbH.AnyDesk"
)

# Install or update an application
function InstallOrUpdateApp($appId) {
    if (Get-Command winget -ErrorAction SilentlyContinue) { 
        if (winget show $appId -ErrorAction SilentlyContinue) { 
            Write-Host "Updating $appId..."
            winget upgrade --id $appId
        } else {
            Write-Host "Installing $appId..."
            winget install --exact --id $appId
        }
    } else {
        Write-Error "winget command not found after installation. Installation may have failed."
        Read-Host
    }
}

# Check and install/update applications
foreach ($app in $defaultinstalltable) {
    InstallOrUpdateApp $app
}
            Write-Host "Apps should be installed and up-to-date, check above for errors."
            Read-Host